{"componentChunkName":"component---src-templates-blog-js","path":"/odoo/rest-api","result":{"data":{"mdx":{"frontmatter":{"title":"Rest-API using Odoo","date":"2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Rest-API using Odoo\",\n  \"date\": \"2019\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"odoo-module\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#odoo-module\",\n    \"aria-label\": \"odoo module permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Odoo Module\"), mdx(\"p\", null, \"In 2018, I was requested to sync data between QT Desktop Application to Odoo 10 server. Initially Odoo already had XML-RPC but it was later agreed, that I need to improve it using new endpoints.\"), mdx(\"p\", null, \"This functionality can be installed as Odoo module, and has capability to use Odoo ORM.\"), mdx(\"h2\", {\n    \"id\": \"sample-code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#sample-code\",\n    \"aria-label\": \"sample code permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Sample Code\"), mdx(\"p\", null, \"Here is the code that I wrote to solve this issue :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"__metaclass__ = type\\n\\nimport json\\nimport logging\\nimport odoo\\nfrom odoo import exceptions\\nfrom odoo.http import Controller, route, request\\nfrom odoo.http import HttpRequest, JsonRequest, WebRequest, Response, Root\\nfrom odoo.http import SessionExpiredException, AuthenticationError, serialize_exception\\nimport werkzeug\\n\\nclass DetailException(Exception):\\n    def __init__(self, code, message):\\n        self.code = code\\n        self.message = message\\n\\nclass ApiRequest(JsonRequest, WebRequest):\\n    _request_type = \\\"json\\\"\\n\\n    def __init__(self, *args):\\n        super(JsonRequest, self).__init__(*args)\\n        self.jsonp_handler = None\\n        self.params = {}\\n        args = self.httprequest.args\\n        jsonp = args.get('jsonp')\\n        self.jsonp = jsonp\\n        request = None\\n        request_id = args.get('id')\\n\\n        request = self.httprequest.stream.read().decode('utf8')\\n\\n        if self.httprequest.method in [\\\"POST\\\", \\\"PUT\\\", \\\"GET\\\", \\\"PATCH\\\"]:\\n            try:\\n                self.jsonrequest = json.loads(request)\\n            except json.JSONDecodeError:\\n                msg = 'Invalid JSON data: %r' % (request,)\\n                raise werkzeug.exceptions.BadRequest(msg)\\n\\n    def _json_response(self, result=None, error=None):\\n        status=200\\n        def process_result(result):\\n            status=200\\n            new_error = result.get('error')\\n            if new_error:\\n                error_code = new_error.get('code')\\n                if error_code:\\n                    status = error_code\\n            new_result = result.get('data')\\n            new_count = result.get('count')\\n            new_status = result.get('code', status)\\n            new_meta = result.get('meta')\\n            return new_result, new_count, new_error, new_status, new_meta\\n\\n        response = {\\n            'meta': '1.5.0', #APIVERSION\\n        }\\n        if error is not None:\\n            response['error'] = error\\n            status = error.get('code')\\n        if result is not None:\\n            result, count, error, status, meta = process_result(result)\\n            if not result is None:\\n                response['data'] = result\\n            if not count is None:\\n                response['count'] = count\\n            if error :\\n                response['error'] = error\\n            if meta :\\n                response['meta'] = meta\\n            if status :\\n                response['code'] = status\\n                status_string = {\\n                    200 : 'success',\\n                    201 : 'created',\\n                    401 : 'unauthorized',\\n                    400 : 'bad request',\\n                    403 : 'forbidden',\\n                    404 : 'not found',\\n                    500 : 'error'\\n                }\\n                response['message'] = status_string[status]\\n\\n        mime = 'application/json'\\n        body = json.dumps(response)\\n        return Response(\\n                    response=body,\\n                    status=status,\\n                    headers=[\\n                        ('Access-Control-Allow-Origin', \\\"*\\\"),\\n                        ('Access-Control-Allow-Methods', \\\"*\\\"),\\n                        ('Access-Control-Allow-Headers', \\\"Origin, X-Requested-With, Content-Type, Accept, Authorization\\\"),\\n                        ('Content-Type', mime),\\n                        ('Content-Length', len(body))])\\n\\ndef get_request_new(self, httprequest):\\n    if '/api/' in httprequest.url and not ('/api/dashboard' in httprequest.url) and httprequest.mimetype in (\\\"application/json\\\", \\\"application/json-rpc\\\"):\\n        return ApiRequest(httprequest)\\n    elif httprequest.args.get('jsonp'):\\n        return JsonRequest(httprequest)\\n    elif httprequest.mimetype in (\\\"application/json\\\", \\\"application/json-rpc\\\"):\\n        return JsonRequest(httprequest)\\n    else:\\n        return HttpRequest(httprequest)\\n\\nRoot.get_request = get_request_new\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#odoo-module","title":"Odoo Module"},{"url":"#sample-code","title":"Sample Code"}]},"fields":{"dirname":"/home/haliib/dev/gatsby/cv-2-pangrip/data/posts/odoo"}}},"pageContext":{"slug":"odoo/rest-api","prev":{"title":"Javascript Widgets","link":"/odoo/widget"},"next":{"title":"Training","link":"/odoo/training"}}},"staticQueryHashes":["3159585216","4261541374"]}