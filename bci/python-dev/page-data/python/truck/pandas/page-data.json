{"componentChunkName":"component---src-templates-blog-js","path":"/python/truck/pandas","result":{"data":{"mdx":{"frontmatter":{"title":"Pandas Library","date":"2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pandas Library\",\n  \"date\": \"2019\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"overview\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#overview\",\n    \"aria-label\": \"overview permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Overview\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \".img/tt2.png\",\n    \"alt\": \"Delivery Sorting Algorithm\"\n  }))), mdx(\"p\", null, \"As the truck numbers were limited, station demands must be sorted to these rules.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"#\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Rules in order\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Demands which are delayed for 24 hours, need to be delivered in the next morning\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Demands which its station categorized as Special Priority\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Demands which its station categorized as INNER ZONE must be prioritized\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"4\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Demands are sorted by its station's critical time (oil level)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"5\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Lastly, demands which exceed station's shift limitation must be reallocated\")))), mdx(\"h2\", {\n    \"id\": \"solution\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#solution\",\n    \"aria-label\": \"solution permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Solution\"), mdx(\"p\", null, \"I solved that by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Pandas Dataframes\"), \". Initially, categorized them into 6 categories and eventually combined all of them again into one dataframe.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \".img/sort1.png\",\n    \"alt\": \"First Step of Sorting Process\"\n  })), \"\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \".img/sort2.png\",\n    \"alt\": \"Final Step of Sorting Process\"\n  }))), mdx(\"h2\", {\n    \"id\": \"pandas-dataframe-code\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#pandas-dataframe-code\",\n    \"aria-label\": \"pandas dataframe code permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Pandas Dataframe Code\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"df_1_priority = df_order.loc[(df_order['priority'].isin([1, 2]))]\\ndf_1_priority = df_1_priority.assign(shift_draft=df_1_priority.apply(lambda x: 1, axis=1),)\\ndf_order = df_order.loc[(df_order['priority'] == 0)]\\n\\no_cts_all = []\\n\\nfor index, time_range in enumerate(self.depot_ref_shift):\\n    shift_start, shift_end, shift = time_range[0], time_range[1], time_range[2]\\n    if shift == 1:\\n        this_df = df_order.loc[((df_order['critical_time'] <= shift_end))]\\n        this_df = this_df.assign(shift_draft=this_df.apply(lambda x: index+1, axis=1),)\\n        o_cts_all.append(this_df)\\n    else:\\n        this_df = df_order.loc[(\\n            (df_order['critical_time'] >= shift_start)\\n            & (df_order['critical_time'] <= shift_end)\\n        )]\\n        this_df = this_df.assign(shift_draft=this_df.apply(lambda x: index+1, axis=1),)\\n        o_cts_all.append(this_df)\\n\\no_smax_cts = []\\no_cts_all_filtered = []\\nfor index, time_range in enumerate(self.depot_ref_shift):\\n    shift_start, shift_end, shift = time_range[0], time_range[1], time_range[2]\\n    df_cts = o_cts_all[index]\\n    if shift == 1:\\n        pass\\n    else:\\n        this_df = df_cts.loc[(\\n            (df_cts['shift_max'] > 0)\\n            & (df_cts['shift_max'] < shift)\\n        )]\\n        print(\\\"Flag Here\\\")\\n        o_smax_cts.append(this_df)\\n\\n        df_cts = df_cts.loc[(\\n            (df_cts['shift_max'] == 0)\\n            | (df_cts['shift_max'] >= shift)\\n        )]\\n\\n    o_cts_all_filtered.append(df_cts)\\n\\n\\no_cts_all = o_cts_all_filtered\\ndf_smax_cts = pd.concat(o_smax_cts, ignore_index=True)\\n\\n\\ndf_order = df_order.loc[(\\n    (df_order['critical_time'] > shift_end)\\n    | (df_order['critical_time'].isna())\\n)]\\n\\ndf_empty_cts = df_order.loc[(\\n    (df_order['critical_time'].isna())\\n)]\\nif not df_empty_cts.empty:\\n    print(\\\"Warning : There are %d orders with Empty Critical Time\\\" % df_empty_cts.shape[0])\\n\\no_smax_all = []\\n\\nfor index, time_range in enumerate(self.depot_ref_shift):\\n    this_shift = time_range[2]\\n\\n    this_df_b = df_smax_cts.loc[(\\n        (df_smax_cts['shift_max'] == this_shift)\\n    )]\\n\\n    df_by_rec_shift = df_order.loc[((df_order['recommended_shift'] >= this_shift))]\\n    this_df = df_by_rec_shift.loc[(\\n        (df_by_rec_shift['shift_max'] == this_shift)\\n    )]\\n\\n    this_df = pd.concat([this_df_b, this_df], ignore_index=True)\\n\\n    this_df = this_df.assign(shift_draft=this_df.apply(lambda x: index+1, axis=1),)\\n    o_smax_all.append(this_df)\\n\\nassert len(o_cts_all) == len(o_smax_all)\\n\\nfor i, _ in enumerate(o_cts_all):\\n    if i == 0:\\n        # Untuk Shift 1\\n        this_df = pd.concat([\\n            df_1_priority,\\n            o_smax_all[i],\\n            o_cts_all[i],\\n        ], ignore_index=True)\\n        this_df = this_df.sort_values(['zonation_code', 'shift_max', 'critical_time'], ascending=[True, False, True])\\n    else:\\n        this_df = pd.concat([\\n            o_smax_all[i],\\n            o_cts_all[i],\\n        ], ignore_index=True)\\n    self.order_insert_at_tick.append(this_df)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#solution","title":"Solution"},{"url":"#pandas-dataframe-code","title":"Pandas Dataframe Code"}]},"fields":{"dirname":"/home/haliib/dev/gatsby/rinkasan2/data/posts/python/truck"}}},"pageContext":{"slug":"python/truck/pandas","prev":{"title":"Automated Truck Scheduling","link":"/python/truck"},"next":{"title":"Performance","link":"/python/truck/performance"}}},"staticQueryHashes":["3159585216","4261541374"]}