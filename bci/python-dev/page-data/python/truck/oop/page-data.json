{"componentChunkName":"component---src-templates-blog-js","path":"/python/truck/oop","result":{"data":{"mdx":{"frontmatter":{"title":"Object Oriented Programming","date":"2019"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Object Oriented Programming\",\n  \"date\": \"2019\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"overview\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#overview\",\n    \"aria-label\": \"overview permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Overview\"), mdx(\"p\", null, \"This project was built with OOP concept.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"#\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Table Name\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Truck\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"TruckList\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Compartment\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"4\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Dispenser\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"5\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Filling Point\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"6\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Station\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"7\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Schedule\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"7\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"TimeSlot\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"8\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Order\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"9\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"OrderList\")))), mdx(\"p\", null, \" Below are code samples : \"), mdx(\"h2\", {\n    \"id\": \"class-definition\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#class-definition\",\n    \"aria-label\": \"class definition permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"Class Definition\"), mdx(\"h3\", {\n    \"id\": \"1-truck--truck\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#1-truck--truck\",\n    \"aria-label\": \"1 truck  truck permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"1. Truck ::: Truck\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"from datetime import datetime, timedelta\\nfrom collections import OrderedDict\\n\\nimport pandas as pd\\n\\nfrom .bin_packing.order_all import process as bin_packs\\nfrom .bin_packing.order_pto_flexible import process as bin_packs_pto\\n\\nfrom app.models.compartment import Compartment\\nfrom app.models.dispenser import TimeSlot\\n\\n\\nclass Truck:\\n    def __init__(self,\\n                 truck_id: 'str',\\n                 qty_compartments: 'list',\\n                 ready_time: 'date time' = None,\\n                 is_pto: bool = False,\\n                 ritase_count: int = 0,):\\n        self.truck_id = truck_id\\n        self.ready_time = ready_time\\n        self.depart_time: 'datetime' = False\\n        self.return_time: 'datetime' = False\\n        self.is_pto = is_pto\\n        self.qty_compartments = qty_compartments\\n        self.max_quantity = sum(qty_compartments)  # maksimum compartment\\n        self.total_ullage = sum(qty_compartments)  # sebelum diisi\\n        self.main_path_nodes = None  # spbu_ids dari trip yg utama\\n        self.direct_nodes = list()  # spbu_ids\\n        self.indirect_nodes = list()\\n        self.load_start_time = None\\n        self.dispenser_id = None\\n        self.depart_time = None\\n        self.shift_plans = None\\n        self.next_ready_time = None\\n        self.travel_nodes_story = False\\n        self.total_distance = 0\\n        self.ritase_count = ritase_count\\n        self.is_fillable = True\\n        self._init_compartment()\\n\\n    @classmethod\\n    def clone(cls, truck: 'Truck'):\\n        truck_id = truck.truck_id\\n        qty_compartments = truck.qty_compartments\\n        ready_time = truck.next_ready_time\\n        is_pto = truck.is_pto\\n        ritase_count = truck.ritase_count\\n        return cls(truck_id, qty_compartments, ready_time, is_pto, ritase_count)\\n\\n    \\n    def to_dict_t_optim(self, id_tbbm, plan_date):\\n        temp_result = []\\n        for comp in self.compartments:\\n            for order in comp.order_ids:\\n                o, fill_quantity = order[0], order[1]\\n                vals = {\\n                    'plan_date': plan_date,\\n                    'id_tbbm': id_tbbm,\\n                    'order_id': o.ref_order_id,\\n                    'id_spbu': o.station_id,\\n                    'no_lo': o.order_id,\\n                    'id_lo': o.id_lo,\\n                    'id_product': o.product_id,\\n                    'quantity': fill_quantity,\\n                    'max_cap': o.station_truck_size,\\n                    'capacity': self.max_quantity,\\n                    'critical_time': o.critical_time,\\n                    'id_truck': self.truck_id,\\n                    'remain_capacity': self.total_ullage,\\n                    'depart_time': self.depart_time,\\n                    'return_time': self.return_time,\\n                    'distance': self.total_distance,\\n                    'shift_plan': self.shift_plans,\\n                    'shift': 0,\\n                    'shift_order': 0,\\n                    'shift_available': 0,\\n                    'idx_truck_temp': '-',\\n                    'travel_path': '-',\\n                    's_order': 0,\\n                    'version': '-',\\n                }\\n                temp_result.append(vals)\\n        return temp_result\\n\\n    def set_main_path_nodes(self, main_path_nodes):\\n        self.main_path_nodes = main_path_nodes\\n\\n    def add_direct_nodes(self, station_id, distance, quantity):\\n        self.direct_nodes.append((station_id, distance, quantity))\\n\\n    def is_full(self, silent=False):\\n        if self.is_pto:\\n            if self.total_ullage > 0:\\n                return False\\n        else:\\n            for comp in self.compartments:\\n                if comp.state == 'empty':\\n                    return False\\n        return True\\n\\n    def assign_orders(self, orders):\\n        \\\"\\\"\\\"\\n            Pastikan total Ullage lebih besar daripada Orders Quantity yang mau di assign.\\n        \\\"\\\"\\\"\\n        orders_qty = sum(o.quantity for o in orders)\\n        if orders_qty > self.total_ullage:\\n            print(\\\"assert orders_qty <= self.total_ullage\\\")\\n        if self.is_pto:\\n            self.assign_orders_reguler(orders)\\n        else:\\n            self.assign_orders_reguler(orders)\\n        self.recalc_tank()\\n\\n    def _get_earliest_dispenser_slots(self, dispensers, load_minute):\\n\\n        all_slot = []\\n\\n        for disp in dispensers:\\n            for slot in disp.slots:\\n                all_slot.append(slot)\\n\\n        def key_start_time(elem):\\n            return elem.start_time\\n\\n        sorted_slot = sorted(all_slot, key=key_start_time)\\n        list_slot = list(sorted_slot)\\n        print([s.start_time for s in list_slot])\\n        for slot in all_slot:\\n            dt_slot_start = datetime.strptime(slot.start_time, \\\"%Y-%m-%d %H:%M:%S\\\")\\n            dt_truck_ready = datetime.strptime(self.ready_time, \\\"%Y-%m-%d %H:%M:%S\\\")\\n            dt_slot_end = datetime.strptime(slot.end_time, \\\"%Y-%m-%d %H:%M:%S\\\")\\n            if dt_truck_ready > dt_slot_start:\\n                timeline = dt_truck_ready\\n            else:\\n                timeline = dt_slot_start\\n            timeline += timedelta(minutes=load_minute)\\n            timeline += timedelta(minutes=4)\\n\\n            diff = dt_slot_end - timeline\\n            if diff.days >= 0 and diff.seconds > 0:\\n                print(\\\"Taken\\\", slot.start_time)\\n                if diff.seconds > 20 * 60:\\n                    new_slot = TimeSlot(\\n                        datetime.strftime(timeline, \\\"%Y-%m-%d %H:%M:%S\\\"),\\n                        slot.end_time,\\n                        slot.next_ready_time,\\n                        diff.seconds / 60,\\n                        slot.dispenser_id\\n                    )\\n                else:\\n                    new_slot = False\\n                return slot.dispenser_id, slot, new_slot\\n        return False, False, False\\n\")), mdx(\"h3\", {\n    \"id\": \"2-compartment--compartment\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#2-compartment--compartment\",\n    \"aria-label\": \"2 compartment  compartment permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"2. Compartment ::: Compartment\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"\\nclass Compartment:\\n    def __init__(self,\\n                 compartment_id: int,\\n                 max_quantity: int):\\n        self.compartment_id = compartment_id\\n        self.max_quantity = max_quantity  # Max Qty dari Comparment\\n        self.ullage = max_quantity  # dapat berangsur berkurang hingga 0\\n        self.state = 'empty'\\n        self.order = False\\n        self.order_ids = list()\\n\\n    def __str__(self):\\n        return str(self.__dict__)\\n\\n    def assign_order(self, order, fill_quantity):\\n        \\\"\\\"\\\"\\n            Update nilai Ullage.\\n            Update nilai Quantity\\n        \\\"\\\"\\\"\\n        # print(f'Order : {order}. Compartment : {self}')\\n        self.order_ids.append(\\n            (order, fill_quantity)\\n        )\\n        self.ullage = self.ullage - fill_quantity  # bisa 0\\n        if self.ullage == 0:\\n            self.state = 'full'\\n        else:\\n            self.state = 'partial'\\n\\n    def describe(self):\\n        order_numbers = ','.join([o[0].order_id + \\\"(\\\" + str(o[1]) + \\\")\\\" for o in self.order_ids])\\n        com_text = \\\"\\\"\\\"{max}\\\\t{ullage}\\\\t{terisi}\\\\t{order}\\\\t{state}\\\\n\\\"\\\"\\\"\\n        return com_text.format(\\n            max=self.max_quantity,\\n            ullage=self.ullage,\\n            terisi=self.max_quantity - self.ullage,\\n            order=order_numbers,\\n            state=self.state,\\n        )\\n\\n    def describe_orders(self):\\n        if self.state == 'empty':\\n            return 'empty'\\n        order = ','.join([o[0].order_id + \\\"(\\\" + str(o[1]) + \\\")\\\" + \\\"(\\\" + str(o[0].product_id) + \\\")\\\" for o in self.order_ids])\\n        return order\\n\\n    def get_order_detail(self):\\n        detail = []\\n        for order in self.order_ids:\\n            detail.append((self.compartment_id, order[0].ref_order_id, order[1], order[0].product_id, order[0].order_id))\\n        return detail\\n\")), mdx(\"h3\", {\n    \"id\": \"3-time-slot--time-slot\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"#3-time-slot--time-slot\",\n    \"aria-label\": \"3 time slot  time slot permalink\",\n    \"className\": \"icon-heading-class before\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"height\": \"20\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"20\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  })))), \"3. Time Slot ::: Time Slot\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"\\nclass TimeSlot:\\n    def __init__(self,\\n                 start_time: 'datetime',\\n                 end_time: 'datetime',\\n                 shift: int,\\n                 interval: 'interval in minute',\\n                 ):\\n        self.start_time = start_time\\n        self.end_time = end_time\\n        self.shift = shift\\n        self.interval = interval\\n\\n    @classmethod\\n    def construct(cls,\\n                  start_time: 'datetime',\\n                  end_time: 'datetime',\\n                  shift: int,\\n                  ):\\n\\n        dt_start_time = datetime.strptime(start_time, \\\"%Y-%m-%d %H:%M:%S\\\")\\n        dt_end_time = datetime.strptime(end_time, \\\"%Y-%m-%d %H:%M:%S\\\")\\n\\n        dt_start_time.replace(second=0)\\n        dt_end_time.replace(second=0)\\n\\n        diff = dt_end_time - dt_start_time\\n        diff_minute = round(diff.seconds / 60)\\n        interval = (diff.days * 3600 * 24) + diff.seconds\\n        if diff.days >= 0 and interval:\\n            r_start_time = datetime.strftime(dt_start_time, \\\"%Y-%m-%d %H:%M:00\\\")\\n            r_end_time = datetime.strftime(dt_end_time, \\\"%Y-%m-%d %H:%M:00\\\")\\n            interval_minute = round(interval / 60)\\n            return cls(r_start_time, r_end_time, shift, interval_minute)\\n        print(f\\\"Creating Slots failed. Interval {diff.seconds} is too short\\\")\\n        return False\\n\\n    def describe(self):\\n        msg = \\\"\\\"\\\"\\n            - {shift} - {interval} minute\\n            From {start_time}\\n            To {end_time}\\n        \\\"\\\"\\\".format(\\n            start_time=self.start_time,\\n            end_time=self.end_time,\\n            shift=self.shift,\\n            interval=self.interval,\\n        )\\n        print(msg)\\n\\n    def validate_time_range(self, x_start_time, x_end_time):\\n        start_time_in_range = self.start_time <= x_start_time < self.end_time\\n        end_time_in_range = self.start_time < x_end_time <= self.end_time\\n\\n        if start_time_in_range or end_time_in_range:\\n            return True\\n        return False\\n\\n    def validate_time_reserve(self, x_start_time, x_end_time):\\n        start_time_in_range = self.start_time <= x_start_time < self.end_time\\n        end_time_in_range = self.start_time < x_end_time <= self.end_time\\n\\n        if start_time_in_range and end_time_in_range:\\n            return True\\n        return False\\n\\n    def generate_new_slots(self, x_start_time, x_end_time):\\n        # Ada 3 Kondisi\\n        new_slots = []\\n\\n        # A. Tidak ada yang di overlay. Semua tertutup\\n        if x_start_time < self.start_time and x_end_time >= self.end_time:\\n            return new_slots\\n\\n        # B. Overlay di depan\\n        if x_start_time <= self.start_time and self.start_time < x_end_time < self.end_time:\\n\\n            dt_end_time = datetime.strptime(x_end_time, \\\"%Y-%m-%d %H:%M:%S\\\")\\n            rounded_end_time = (dt_end_time + timedelta(minutes=1)).strftime(\\\"%Y-%m-%d %H:%M:%S\\\")\\n\\n            new_slots.append(TimeSlot.construct(\\n                start_time=rounded_end_time,\\n                end_time=self.end_time,\\n                shift=self.shift,\\n            ))\\n            return new_slots\\n\\n        # B. Overlay di Akhir\\n        if self.end_time <= x_end_time:\\n            dt_start_time = datetime.strptime(x_start_time, \\\"%Y-%m-%d %H:%M:%S\\\")\\n            rounded_start_time = (dt_start_time - timedelta(minutes=1)).strftime(\\\"%Y-%m-%d %H:%M:%S\\\")\\n            new_slots.append(TimeSlot.construct(\\n                start_time=self.start_time,\\n                end_time=rounded_start_time,\\n                shift=self.shift,\\n            ))\\n            return new_slots\\n\\n        # C. Overlay di tengah\\n        start_time_in_range = self.start_time < x_start_time < self.end_time\\n        if start_time_in_range:\\n            dt_start_time = datetime.strptime(x_start_time, \\\"%Y-%m-%d %H:%M:%S\\\")\\n            dt_end_time = datetime.strptime(x_end_time, \\\"%Y-%m-%d %H:%M:%S\\\")\\n            rounded_start_time = (dt_start_time - timedelta(minutes=1)).strftime(\\\"%Y-%m-%d %H:%M:%S\\\")\\n            rounded_end_time = (dt_end_time + timedelta(minutes=1)).strftime(\\\"%Y-%m-%d %H:%M:%S\\\")\\n            print(f\\\"{x_start_time} vs {rounded_start_time}\\\")\\n            print(f\\\"{x_end_time} vs {rounded_end_time}\\\")\\n            new_slots.append(TimeSlot.construct(\\n                start_time=self.start_time,\\n                end_time=rounded_start_time,\\n                shift=self.shift,\\n            ))\\n            new_slots.append(TimeSlot.construct(\\n                start_time=rounded_end_time,\\n                end_time=self.end_time,\\n                shift=self.shift,\\n            ))\\n            return new_slots\\n        return new_slots\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#class-definition","title":"Class Definition","items":[{"url":"#1-truck--truck","title":"1. Truck ::: Truck"},{"url":"#2-compartment--compartment","title":"2. Compartment ::: Compartment"},{"url":"#3-time-slot--time-slot","title":"3. Time Slot ::: Time Slot"}]}]},"fields":{"dirname":"/home/haliib/dev/gatsby/rinkasan2/data/posts/python/truck"}}},"pageContext":{"slug":"python/truck/oop","prev":{"title":"Performance","link":"/python/truck/performance"},"next":{"title":"Rest-API","link":"/python/rest-api"}}},"staticQueryHashes":["3159585216","4261541374"]}